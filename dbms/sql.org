#+TITLE: SQL Language

* SELECT

#+BEGIN_SRC sql
-- SELECT column1, column2, ... FROM table
SELECT first_name, last_name, email FROM customer
SELECT * FROM customer  -- all columns
#+END_SRC

** SELECT DISTINCT
   - Removes duplicate rows from the result
   - Order of rows is unpredictable with select. So, especially with
     DISTINCT ON, it is recommended to use ORDER BY

#+BEGIN_SRC sql
SELECT DISTINCT column1 FROM table1
-- select distinct combinations of column1, column2, ...
SELECT DISTINCT column1, column2, ... FROM table1
-- postgresql supports distinct on
SELECT DISTINCT ON (column1), column2, ... FROM table1 ORDER BY column1, column2
#+END_SRC

** ORDER BY
   - sort by first_name in ascending order and then if some first_names
     are equal, sort by last_name in descending order.

#+BEGIN_SRC sql
SELECT 
  first_name, 
  last_name 
FROM 
  customer 
ORDER BY 
  first_name ASC, 
  last_name DESC
#+END_SRC

** WHERE
   - = > < <= >= AND OR
   - <> or != are used for not equal

#+BEGIN_SRC sql
SELECT column1, column2 ...
FROM table1
WHERE conditions
#+END_SRC

** LIMIT
   - Return only n rows of the result after skipping the first m rows.

#+BEGIN_SRC sql
SELECT
 *
FROM
 table1
LIMIT n OFFSET m
#+END_SRC

** LIKE
   - Used to search patterns. 
   - % -> any sequence of characters
   - _ -> any single character
   - postgres has ILIKE which is case insensitive

#+BEGIN_SRC sql
SELECT
 first_name,
 last_name
FROM
 customer
WHERE
 first_name LIKE '%er%' AND 
 last_name NOT LIKE '_ha%'
#+END_SRC

** IN

#+BEGIN_SRC sql
-- same for NOT IN
value IN (value1,value2,...)
value IN (SELECT value1 FROM table1)
#+END_SRC

** BETWEEN

#+BEGIN_SRC sql
-- or NOT BETWEEN
VALUE BETWEEN low AND high
#+END_SRC

* JOINS
  - [[https://stackoverflow.com/questions/3022713/difference-between-inner-join-full-join][Difference between Joins]]

** INNER JOIN
   - like intersection of 2 sets

#+BEGIN_SRC sql
SELECT * FROM A
INNER JOIN B on A.id = B.id
#+END_SRC

** FULL [OUTER] JOIN
   - Outer is optional
   - Like union of 2 sets
   - Can contain many nulls

#+BEGIN_SRC sql
SELECT * FROM A
FULL [OUTER] JOIN B on A.id = B.id
#+END_SRC

** LEFT [OUTER] JOIN
** RIGHT [OUTER] JOIN
** NATURAL [INNER, LEFT, RIGHT] JOIN
   - Implicit join based on column names
   - INNER is default
** CROSS JOIN
   - Cartesian product of rows in each table

* GROUP BY, HAVING
  - used with aggregate functions like SUM, COUNT

#+BEGIN_SRC sql
SELECT column1, aggregate_function(column2)
FROM table1
GROUP BY column1
HAVING condition
#+END_SRC

* Set operations
** UNION
    - Needs same # of columns, corresponding columns must have
      compatible data types
    - Removes duplicates unless UNION ALL is used

** INTERSECT
** EXCEPT
   - Set operation A - B

* Subquery
  - Query inside a query.

#+BEGIN_SRC sql
SELECT film_id, title, rental_rate
FROM film
WHERE rental_rate > (
        SELECT AVG (rental_rate)
        FROM film
)
#+END_SRC

#+BEGIN_SRC sql
SELECT film_id, title
FROM film
WHERE film_id IN (
        SELECT inventory.film_id
        FROM rental
        INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
        WHERE return_date BETWEEN '2005-05-29' AND '2005-05-30'
)
#+END_SRC

* Modifying Data
** INSERT
#+BEGIN_SRC sql
-- Works even without all columns 
-- Rest are set to null
INSERT INTO table (column1, column2, ...) 
VALUES
(value1, value2, ...)
(value1, value2, ...)
#+END_SRC

** UPDATE
#+BEGIN_SRC sql
UPDATE table1
SET column1 = value1,
    column2 = value2 ,...
WHERE
 condition;

-- Setting to a default value
SET last_update = DEFAULT
-- Setting to another column (maybe from another table)
SET column1 = column2
#+END_SRC

** DELETE
#+BEGIN_SRC sql
DELETE FROM table1
WHERE condition

DELETE FROM table1
USING table2
WHERE table1.id = table2.id

-- Same thing using subquery
DELETE FROM table1
WHERE table1.id = (SELECT id FROM table2)

-- Delete all rows
DELETE FROM table1
#+END_SRC

** UPSERT
#+BEGIN_SRC sql
INSERT INTO table1(column_list) VALUES(value_list)
ON CONFLICT target action
#+END_SRC

  - target can be column_name, ON CONSTRAINT constraint_name, WHERE predicate
  - action can be DO NOTHING, 
    DO UPDATE SET column1 = value1, ... WHERE condition

* Managing tables
** CREATE TABLE
** ALTER TABLE
** RENAME TABLE
** ADD/DROP/RENAME COLUMN

* Constraints
** PRIMARY KEY
  - PRIMARY KEY = NOT NULL + UNIQUE
  - default name is table name_pk

#+BEGIN_SRC sql
create TABLE table1 (
  column1 INTEGER PRIMARY KEY,
  column2 TEXT,
  ...
)
#+END_SRC

#+BEGIN_SRC sql
create TABLE table1 (
  column1 INTEGER,
  column2 TEXT,
  ...
  PRIMARY KEY (column1, column2)
)
#+END_SRC

#+BEGIN_SRC sql
-- naming primary key
CONSTRAINT constraint_name PRIMARY KEY(column_1, column_2,...)
#+END_SRC

** Foreign key
   - Refers to a primary key in another table
   - Default name is table_column_fkey
   - ON DELETE RESTRICT: delete row in parent only if all the
     references have been deleted
   - CASCADE: delete all referenced rows in child tables if parent's
     row is deleted
   - NO ACTION: (default) will raise an error if the constraint is checked
   - RESTRICT, CASCADE, NO ACTION can be used with ON UPDATE too.

#+BEGIN_SRC sql
create TABLE table2 (
...,
other_id INTEGER REFERENCES table1(id) ON DELETE RESTRICT
)

-- Another way to define foreign key

create TABLE table2 (
...,
other_id INTEGER,
...
FOREIGN KEY (other_id) REFERENCES table1(id)
)
#+END_SRC

** Check constraint
   - Default name is {table}_{column}_{check}
#+BEGIN_SRC sql
CREATE TABLE employees (
 id serial PRIMARY KEY,
 first_name VARCHAR (50),
 last_name VARCHAR (50),
 birth_date DATE CHECK (birth_date > '1900-01-01'),
 joined_date DATE CHECK (joined_date > birth_date),
 salary numeric CHECK(salary > 0)
)
#+END_SRC
