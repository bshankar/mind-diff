#+TITLE: Networking for web developers

* From ping to HTTP
** Setup
  - +Install vagrant, ubuntu/trusty64+
  - install openbsd-netcat, tcpdump, traceroute, mtr, dnsutils, lsof

** Try these commands
  
#+BEGIN_SRC shell
ip addr show enp5s0
ip route show
ping -c3 8.8.8.8
host -t aaaa google.com
host -t mx udacity.com
printf 'HEAD / HTTP/1.1\r\nHost: www.udacity.com \r\n\r\n' \ | nc www.udacity.com 80
tcpdump -n -c3 -i enp0s29u1u2 port 22
traceroute www.udacity.com
mtr udacity.com
#+END_SRC

** Ping
  - sends an echo request
  - goes to receiver's OS (no server)
  - receiver responds back

#+BEGIN_SRC shell
printf 'HEAD / HTTP/1.1\r\nHost: en.wikipedia.org\r\n\r\n' | nc en.wikipedia.org 80
#+END_SRC

** Netcat
  - printf converts \r\n into newlines but echo doesn't.
  - TCP is implemented in the OS. nc is a wrapper around TCP.
  - HTTP is implemented in the browser.
  - rst (reset packet) is an error when a message is sent to a port on
    which no server is listening.
  - nc -l can handle only a single connection (unlike web servers for Ex.)

#+BEGIN_SRC shell
nc -l 3456             # listen to port 3456 in one terminal
nc localhost 3456      # connect and send some text (works both ways, using just TCP)
# disconnect with Ctrl D (Unix end of input signal), or Ctrl C
#+END_SRC

  - Be a web browser

#+BEGIN_SRC shell
printf 'HTTP/1.1 302 Moved\r\nLocation: https://www.eff.org/' | nc -l 2345
#+END_SRC

** IETF model

   | Layer       | Protocols      | Concepts                       |
   |-------------+----------------+--------------------------------|
   | Application | HTTP, SSH      | Urls, passwords                |
   | Transport   | TCP, UDP       | port numbers, sessions         |
   | Internet    | IP             | IP addresses, routes           |
   | Hardware    | WiFi, Ethernet | Signal strength, Access points |
   |             |                |                                |

** HTTP
   - [[https://en.wikipedia.org/wiki/List_of_HTTP_status_codes][Status codes]]
   - epoll? in linux

** Ports
   - non-root user 2^{10} to 2^{16}
   - root user starts from 1.
   - Address already in use error.

#+BEGIN_SRC shell
sudo lsof -i
#+END_SRC

* Names and addresses
  - Hosts: a machine on the internet that might host services
  - Endpoints: 2 machines/programs that are communicating over the network
  - DNS client code (the resolver) is built into the OS
  - Alias is done with CNAME

    | DNS record type | Full form   | Meaning                                            |
    |-----------------+-------------+----------------------------------------------------|
    | CNAME           | Canonical   | domain name is an alias for the 'canonical' domain |
    | A               | A record    | IPv4 --> domain name                               |
    | AAAA            | Quad-A      | IPv6 --> domain name                               |
    | NS              | Name server | what DNS servers have the record of that domain    |

  - A record for <>.com --> nameserver for <>.com --> NS record for
    <>.com --> nameserver for com --> NS record for com --> root servers
  - com/org/edu/net/country code/... are Global Top Level Domains

  - Client -> local caching server (no) --> root servers (NS com) -->
    com servers (<> NS) --> <>.com servers (A record) --> cache of
    caching server

  - DNS records have TTL (time to live) of generally 60s to prevent
    stale data.
  - host header in Http
  - search domain: makes resolver look up names inside a domain.

  - IPv4: a.b.c.d each 1 byte. 32-bit, 2^{32} ~ 4.29 billion possible IPs

  - IPv6: 128-bit, 2^{128} ~ 3.4e38 possible IPs

** Packets
   - Contains IPs of from and to.

#+BEGIN_SRC shell
ping google.com  # look up the ip address and ping it
#+END_SRC

** host

#+BEGIN_SRC shell
host google.com
host -t a google.com
#+END_SRC

** dig
   - Gives almost the same info as host in a script friendly way.

* Addressing and Networks

** Reserved IP addresses


[[./ipv4.png]]

  - light green: fully reserved
  - dark green: partially reserved
  - cyan: ip multicast
  - orange: set aside for future but lost because of being blocked as
    invalid 

  - Just 1/8th are reserved for something other than addressing public hosts.
  - IPv4 addresses are not just not enough anyways.

** Netblocks and subnets
   - same network block = same IP prefix, can communicate without a router
   - 198.51.100.0/24 : 24-bit fixed network part, 8-bit host part
   
   - /22 network = 10-bit host part: 2^{10} = 1024 hosts but top,
     bottom and first addresses (for router) are reserved so only *1021*
     hosts.

   - subnet mask for a 171.64.0.0/14 Stanford network: 255.252.0.0
   - and this network has 2^{32 - 14} = 2^18 = 262144 hosts

** Hosts and IP addresses
   - Each network interface on a host/computer can have >= 0 IP addresses.
   - Enternet, WiFi, lo, tunnel, virtual machine interface etc

#+BEGIN_SRC shell
ip addr show
ifconfig
#+END_SRC

** Routers and default gateways
   - router acts as a gateway between networks
   - Most hosts have 1 IPv4 address but a router has >= 2.
   - Host on LAN --> default gateway --> rest of internet
   - default gateway -> default gateway ... --> target host

#+BEGIN_SRC shell
ip route show default
netstat -nr
#+END_SRC

** Network address translation
   - Private IP addresses (RFC 1918)
     - 10.0.0.0/8
     - 172.16.0.0/12
     - 192.168.0.0/16  with default gateway of 192.168.0.1

   - Private IP addresses are not about /privacy/ but being on an
     internal network.
   - The home router gives private IPs to each device connected to
     it. The public IP assigned to the home router will be the same
     for all these devices
   - Private IPs, ports --> NAT --> Public IPs, ports
   - NAT is *bad*. You cannot easily run a server or develop network
     apps /without/ centralized servers without hackish workarounds.
   
** IPv6
  - IPv5 is a failed experiment
  - 340282366920938463463374607431768211456 addresses
  - Smallest home network is /64
  - Google's address: 2404:6800:4007:0801:0000:0000:0000:200e
  - Short form: /2404:6800:4007:801::200e/
  - 8 x 4 = 32 (IPv4), 16 x 8 = 128 (IPv6)
   (0 - 255)           (0 - 0xffff)

  - Google's network block is 2404:6800/32 while on IPv4 it is a
    single address, on IPv6 it is a huge /96 network with subnet and
    host addresses.

  - fc00::/7, fdxx:xxxx:xxxxâ€¦ are private IPs
