#+TITLE: Creating Babel Plugins

Babel is a static analysis tool (Analyze without running the code).

* Stages
** Parse
*** Lexical Analysis
    - string of code --> stream of tokens
    - Tokens: flat array of objects
*** Syntactic analysis
    - stream of tokens --> AST

** Transform
   - Traverse, add, update, delete nodes
   - Most complex part
   - /Plugins operate here/

** Generate
   - final AST --> code string

* Traversal
  - Traverse the AST(nested object) recursively
  - nodes of type identifier don't have child nodes

* Visitors
  - A pattern used in AST traversal
  - Visitors are objects with methods defined for accepting particular
    node types in a tree
  - called on /enter/
  - [[https://github.com/babel/babel/tree/master/packages/babel-types/src/definitions][Aliases for visitor nodes]]

#+BEGIN_SRC javascript
let visitor = {Identifier() {
  // will be called when a node of type 'Identifier' is entered
  console.log('called')
}}

visitor.memberExpression = function () {
   ...
}

const MyVisitor = {
  Identifier: {
    enter() {
      ...
    },
    exit() {
      ...
    }
  }

  // multiple visitor nodes
  "MemberExpression|FunctionDeclaration" (...) {...}
};

#+END_SRC

* Paths
  - path is a reactive representation of a node's position, other
    info about it, methods to add, update, remove, move nodes.
** Paths in visitors
   - Inside visitors we are actually visiting the path

   #+BEGIN_SRC javascript
   const MyVisitor = {
     Identifier(path) {
       console.log("Visiting: " + path.node.name);
     }
   };
   #+END_SRC

* State
  - *NOPE*. Eliminate global state from visitors
  - E.g. Put a visitor inside a visitor recursively to change something
    inside something else instead of writing a visitor that changes
    stuff over whole tree which is error prone.

* Scopes
  - Js uses lexical scoping
  - Scope can be represented like this

    #+BEGIN_SRC javascript
    {
      path: path,
      block: path.node,
      parentBlock: path.parent,
      parent: parentScope,
      bindings: [...]
    }
    #+END_SRC

** Bindings
   - is like variable assignment
   - We can refer to that binding from the same/lower scope

   #+BEGIN_SRC javascript
   {
     identifier: node,
     scope: scope,
     path: path,
     kind: 'var',

     referenced: true,
     references: 3,
     referencePaths: [path, path, path],

     constant: false,
     constantViolations: [path]
   }
   #+END_SRC

   - We can know that the binding is constant/ find all references.
   - We can use this info for E.g. minification

* API
** babylon
   - the parser

   #+BEGIN_SRC javascript
   const ast = babylon.parse(code, {
     sourceType: "module", // default is script
     plugins: ["jsx"]  // default is []
   });
   #+END_SRC

   - 'module' =sourceType= will parse in =strict mode= and allow strict
     declarations, 'script' will not.
   - 'script' will give errors if it finds =import= or =export=

   - Enable [[https://github.com/babel/babylon/blob/master/README.md#plugins][internal plugins]] with =plugins= option

** babel-traverse
   #+BEGIN_SRC javascript
   traverse(ast, {enter(path) {
     ...
   }})
   #+END_SRC

** babel-types
   - utility library like lodash for building, validating and
     converting AST nodes
   - Contains definition of every single node type
   - E.g.

     #+BEGIN_SRC javascript
     defineType("BinaryExpression", {
       builder: ["operator", "left", "right"],
       fields: {
         operator: {
           validate: assertValueType("string")
         },
         left: {
           validate: assertNodeType("Expression")
         },
         right: {
           validate: assertNodeType("Expression")
         }
       },
       visitor: ["left", "right"],
       aliases: ["Binary", "Expression"]
     });
     #+END_SRC

*** Builder
    - each node has a builder method which when used, it looks like
      this =t.binaryExpression("*", t.identifier("a"), t.identifier("b"));=
    - Also validate nodes they are creating and throw errors if used improperly.

*** Validators
    - =t.isBinaryExpression(..., {...})=
    - =t.assertBinaryExpression(..., {...})= throws errors

** Converters
*** babel-generator
    - AST -> source code

    #+BEGIN_SRC javascript
    import generate from 'babel-generator'
    generate(ast, {...}, code)
    #+END_SRC

*** babel-template
    - /Quasiquotes/: Strings of code with placeholders
    - Can be used instead of ASTs

    #+BEGIN_SRC javascript
    const buildRequire = template(`
    var IMPORT_NAME = require(SOURCE);
    `);

    const ast = buildRequire({
      IMPORT_NAME: t.identifier("myModule"),
      SOURCE: t.stringLiteral("my-module")
    });
    #+END_SRC

* Transformation Operations
* Plug-in Options
* Best Practices
  - Create helper builders, checkers
  - Avoid traversing the AST as much as possible
    - Merge visitors when possible
    - Do not traverse when manual look up will do
  - Optimizing nested visitors
    - store the inner visitor in a variable and pass it each time
    - A state can be passed to traverse and have access to it on
      'this' in the visitor
  - Being aware of nested structures
  - Unit Testing
    - Snapshot tests
    - AST tests
    - exec tests

* Reference
  - [[https://github.com/babel/babylon/blob/master/ast/spec.md][Babel AST spec]]
  [[https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-plugin-handbook][- Babel Plugin Handbook]]

* Other
  - Run =gulp build= after editing a package to regenerate the =lib/= folder.
