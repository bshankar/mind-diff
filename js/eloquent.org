#+TITLE: Eloquent Javascript

* Chapter 1
** Numbers
  - 64-bit signed
  - non-whole numbers
  - max of 9x10^15
    
*** Special numbers
   - + Infinity, -Infinity, NaN


** Strings
  - single or double quotes

** Operators
*** Unary operators

#+BEGIN_SRC js

console.log(typeof 3);
// number
console.log(typeof "x");
// string

#+END_SRC

** Boolean values
  - true, false.

#+BEGIN_SRC js

console.log(3 < 2);
// false

#+END_SRC

*** Comparisons
   - String comparisons based on Unicode standard.
   - NaN is not equal to NaN.
   - ternary operator <condition> ? <if yes> : <else>
   - ===, !== (compare without type coercion)

** Undefined values
  - null, undefined (treat them as interchangeable)

** Type coercion
  - Weird conversions!

#+BEGIN_SRC js
console.log(8*null);
// 0
console.log("5" - 1);
// 4
console.log("5" + 1);
// "51"
console.log("five" * 2);
// "NaN"
console.log(false == 0);
// true
console.log(null == undefined);
// true
console.log(null == 0);
// false
#+END_SRC

** Short circuiting of logical operators
  - Similar to python

* Chapter 2
  Same as java!
** Sample functions
   - Alert (shows a message)
   - Prompt (takes user input)
   - Confirm (confirmation dialog)
** Conventions
   - Camel case.

* Chapter 3: Functions

** Syntax

#+BEGIN_SRC js

var square = function(x) {
  return x*x;
}

console.log(square(12))
// 144

#+END_SRC

** Scope
   - Lexical scoping
   - Only functions create new scope. Freestanding blocks are allowed.
   - 'let' creates a variable that is local to an enclosing block
     instead of the enclosing function in case of 'var'.

** Functions are values

** Function declaration
   - Function declarations are automatically moved to the top.
   - Do not put function definitions inside conditional statements! It
     leads to undefined behavior.

#+BEGIN_SRC js

console.log(square(2));
// 4

function square(x) {
  return x*x;
}

#+END_SRC

** Optional arguments
   - js ignores the extra arguments if too many are provided.
   - js assigns 'undefined' to missing arguments.

** Closure

#+BEGIN_SRC js
function wrapValue(n) {
  let localVariable = n;
  return function() {return localVariable;};
}

let wrap1 = wrapValue(1);
let wrap2 = wrapValue(2);
console.log(wrap1);
// 1
console.log(wrap2);
// 2
#+END_SRC

*** Multiplier example

#+BEGIN_SRC js

function multiplier(factor) {
  return function(number) {
    return number*factor;
  }
}

var twice = multiplier(2);
console.log(twice(5));
// 10
#+END_SRC

** Recursion
   - Very slow compared to looping (10x slower!)

** Coding principles
   - Small and understandable variable names
   - keep functions small and stupid.
   - Write pure functions as much as possible.

* Chapter 4 (Objects and Arrays)

** Arrays

#+BEGIN_SRC js
var listOfNumbers = [1, 3, 4, 5, 7];
console.log(listOfNumbers[1]);
// 3
#+END_SRC

  - All js values have properties except null and undefined.

** Objects

#+BEGIN_SRC js

var day1 = {
  squirrel: false,
  events = ["dragons", "be", "here"]
};

console.log(day1.squirrel);
// false
console.log(day1.wolf);
// undefined

day1.wolf = false;
console.log(day1.wolf);
// false

delete day1.wolf;
console.log(day1.wolf);
// undefined

console.log("wolf" in day1);
// false
#+END_SRC

** Mutability

   - Numbers, strings, booleans are all immutable
   - Objects are mutable.
   - Comparing different objects will return false even if they have
     the same contents.

** Array methods
   - push(e), pop
   - shift (removes front element)
   - unshift(e) (pushes an element to the front)
   - indexOf(element, [start]), lastIndexOf(<element>, [start searching from])
   - slice(start, stop)
   - concat glues arrays together

** String properties
   - added properties do not stick
   - similar to arrays except indexOf can take more than one character.

** Arguments object

#+BEGIN_SRC js
function argumentCounter() {
  console.log("you gave me", arguments.length, " arguments.");
}

argumentCounter("one", "two", "three");
// you gave me 3 arguments.
#+END_SRC

** Math object
   Same as before

** Global object 
   in browsers global scope objects are stored in window variable.

* Chapter 5: Higher order functions
  Use abstraction as much as possible.
** Apply method
   - function.apply(<object calling the method>, arguments);

#+BEGIN_SRC js

function transparentWrapping(f) {
  return function() {
    f.apply(null, arguments);
  };
}

#+END_SRC

** JSON
   - JSON.stringify(<object>) converts an object to Json string.
   - JSON.parse(<Json string>) parses a string and loads it as a Js object.

** Filter
   - array.filter(<test function>) returns a new array containing the
     elements of array which satisfy the test function.

** Map
   - array.map(<function>) applies a function to each element of the
     array and creates a transformed array.

** Reduce (sometimes called fold)
   - array.reduce(<function>) computes a single value from the array
     by combining the current value with each element in the array.
   - Ex: summing elements in an array.

** The cost of composability
   - Speed

** Binding
   - function.bind(<calling object>, <some arguments>) fixes some
     arguments of a function.

#+BEGIN_SRC js

let theSet = ["Carel Haverbeke"];

function isInSet(set, person) {
  return set.indexOf(person.name) > -1;
}

console.log(ancestry.filter(isInSet.bind(null, theSet)));
// expected output
#+END_SRC

* Chapter 6: Objects 

** Methods
   - Properties that hold function values

#+BEGIN_SRC js
function speak(line) {
    console.log("The " + this.type + " rabbit says '" + line + "'");
}

let whiteRabbit = {type: "white", speak: speak};
whiteRabbit.speak("I am too fast for you to catch up!");
// The white rabbit says 'I am too fast for you to catch up!'
#+END_SRC

** Prototypes
#+BEGIN_SRC js

let empty = {};
console.log(empty.toString);
// function toString() {...}

console.log(empty.toString());
// [Object object]
#+END_SRC

    - In addition to the set of properties, almost all objects have a
      prototype object.
    - Empty object's prototype is Object.prototype
    - Object.getPrototypeOf returns the prototype of an object. 
    - Example prototypes: Function.prototype, Array.prototype

    - Object.create(<prototype>) creates an object with a specific
      prototype.

#+BEGIN_SRC js

let protoRabbit = {speak: function(line) {
    console.log("The " + this.type + " rabbit says '" + line + "'");
}};

let killerRabbit = Object.create(protoRabbit);
killerRabbit.type = "killer";
killerRabbit.speak("Stab Stab!");
// The killerRabbit says 'Stab Stab!'
#+END_SRC

** Constructor
   - is a more convenient way to create objects from a shared prototype.
   - calling a function with the new keyword makes it get treated like
     a constructor
   - 'new' creates an (new) instance of the constructor.
   - Constructor names are capitalized.

#+BEGIN_SRC js
function Rabbit(type) {
    this.type = type;
}

var blackRabbit = new Rabbit("black");
console.log(blackRabbit.type);
// black
#+END_SRC

  - Constructors get a property named prototype which (by default)
    holds an empty object which derives from object.prototype.

#+BEGIN_SRC js

Rabbit.prototype.speak = function(line) {
    console.log("The " + this.type + " rabbit says '" + line + "'");
}

blackRabbit.speak("doom!");
#+END_SRC

  - A constructor's actual prototype is Function.prototype but its
    prototype property will be the prototype of the instances created
    through it but not *its own property*!

** Overriding derived properties

#+BEGIN_SRC js

Rabbit.prototype.teeth = "small";
console.log(killerRabbit.teeth);
// small

killerRabbit.teeth = "long, sharp and bloody"
console.log(killerRabbit.teeth);
// long, sharp and bloody
console.log(blackRabbit.teeth);
// small
console.log(Rabbit.prototype.teeth);
// small
#+END_SRC

** COMMENT Prototype inference
  - Properties and methods added to a prototype get added to all the
    objects based on it.
  - Properties are either enumerable or non-enumerable. Non-enumerable
    properties are not listed in for (key in Object)
  - Example of Non-enumerable property is toString
  - Every property added through assignment is enumerable.

  - We can create our own non enumerable property as follows

#+BEGIN_SRC js
Object.defineProperty(Object.prototype, 'hiddenNonsense',
                      {enumerable: false, value: "hi"});

for (let name in map)
    console.log(name);
// pizza
// touched tree

console.log(map.hiddenNonsense);
// hi

console.log(map.hasOwnProperty("toString"));
// false
#+END_SRC

  - object.hasOwnProperty(<property>) tells us whether the object
    *itself* has the property without looking at its prototypes.

  - If someone messed up your base object prototype use this loop.

#+BEGIN_SRC js
for (let name in map)
    if (map.hasOwnProperty(name)) {
        // it is an own property
        // ... do something with it
    }
#+END_SRC

** Prototype-less objects

   - Suppose someone set map.hasOwnProperty to 42. (Eww!) Now we can't
     have prototypes in our way. So we create a prototype-less object.

#+BEGIN_SRC js

let map = Object.create(null);
map["pizza"] = 0.069;
console.log("toString" in map);
// false
console.log("pizza" in map);
// true

#+END_SRC

  - Now we can safely use for/in loops without worrying about what
    happened to Object.prototype.

** Polymorphism

  - When a piece of code is written to work with objects that have a
    certain interface (Ex: a toString method) any object which happens
    to support this same interface can be plugged into the code and
    it'll just work.

** Getters and Setters

#+BEGIN_SRC js

let pile = {elements: ["egg shell", "orange peel", "worm"], 
            get height() {
                return this.elements.length;
            }

            set height() {
                console.log("Ignoring attempt to set height to ", value);
            }
           };

console.log(pile.height);
// 3
pile.height = 100;
// Ignoring attempt to set height to 100
#+END_SRC

  - get and set allow you to run a function when a value is read or written.

** Inheritance 
   - We can reuse the functions from an object and create a slightly
     modified new object. this is inheritance.
 
#+BEGIN_SRC js

function RTextCell(text) {
    TextCell.call(this, text);
}

RTextCell.prototype = Object.create(TextCell.prototype);
RTextCell.prototype.draw = function(width, height) {
    // A different draw function ...
}
#+END_SRC

** Design tips
  - Use encapsulation and polymorphism whenever possible instead of
    inheritance as it increases code coupling.

** instanceOf operator
   - Says whether an object was derived from a specific constructor.
   - instanceOf will see through inherited types. RTextCell is an
     instance of TextCell because RTextCell.prototype derives from TextCell.prototype.
   - Almost every object is an instance of Object.

#+BEGIN_SRC js
console.log(new RTextCell("A") instanceOf RTextCell);
// true
console.log(new RTextCell("A") instanceOf TextCell);
// true
console.log(new TextCell("A") instanceOf RTextCell);
// false
console.log([1] instanceOf Array);
// true
#+END_SRC

* Chapter 8: Errors
** Strict mode
   - 'use strict' shows error when:
   - Normally if you forget to put 'var', 'const' etc, js creates a
     global variable
   - 'this' will be undefined for functions that are not called as
     methods. Without strict mode 'this' will be the global scope
     object that creates and reads global variables.
   - multiple parameters have same name
   - Removes certain problematic features like 'with'

** Debugging
   - Resist the urge to make random changes to the code
   - Come up with a theory why the error might be occurring
   - Use console.log or debugging capabilities of your browser

** Error propagation
   - Prevent Error propagation by

*** Return a special value
    - null or undefined when a user inputs unexpected values
    - Can lead to cluttered code

*** Exceptions

#+BEGIN_SRC js
throw new Error('msg')

try {}
catch (e) {}
finally {}
#+END_SRC

*** Selective catching exceptions
    - js cannot!
    - Dont' blanket catch exceptions unless you're routing them
      somewhere else.
    - Create new types of errors and use them instead

#+BEGIN_SRC js
function InputError(message) {
  this.message = message
  this.stack = (new Error()).stack
}
InputError.prototype = Object.create(Error.prototype)
InputError.prototype.name = "InputError"

... 
catch (e) {
  if (e instanceof InputError) ...
}
#+END_SRC

*** Assertions
    - Assert object
    - ensures failure at the point of mistake

* Chapter 9: Regular expressions

#+BEGIN_SRC js
let re1 = new RegExp("abc")
let re2 = /abc/  
#+END_SRC

  - When in doubt whether a character is a special character in a
    regex, put \ before any character that is not a letter, number or
    a whitespace.

** Testing for matches

#+BEGIN_SRC js
console.log(/abc/.test('abcde'))
// true
console.log(/abc/.test('abxde'))
// false
#+END_SRC

** Matching a set of characters

   - \d any digit character
   - \w alphanumeric character
   - \s whitespace character

   - \D not a digit
   - \W not an alphanumeric character
   - \S A non-whitespace character
   - . any character except newline

   - Any character inside the square brackets.
   - [\d.+] matches a digit or a dot or a plus.
   - [^\d.+] matches anything which is *not* a digit, dot or plus.

   - \d* matches 0 or more digits
   - \d+ matches 1 or more digits
   - \d? matches 0 or 1 digits
   - \d{4} matches exactly 4 digits
   - \d{,5} matches 0 to 5 digits
   - \d{5,} matches 5 or more times

   - /boo+/i (i for case insensitive search)

** Matches and groups

#+BEGIN_SRC js
let match = /\d+/.exec("one two 100")
console.log(match)
// [ '100', index: 8, input: 'one two 100' ]
#+END_SRC

  - String values have a match method that behaves similarly.
  - Sub-expressions inside '()' also appear in the array if they match
    after the whole match otherwise there'll be undefined in their place.

#+BEGIN_SRC js
console.match(/bad(ly)?/.exec("bad"))
["bad", undefined]
console.match(/bad(ly)?/.exec("badlyer"))
["badly", "ly"]
#+END_SRC

  - When a group is matched multiple times, only the last match ends
    up in the array.

** Word and string boundaries

  - ^, $ matches start and end of a string
  - \b for word boundaries

** Choice patterns
  - (pig|cow) matches either 'pig' or 'cow' in the string.

** Backtracking
   - The matcher backtracks slowing it down greatly when there are
     many ways to match the input.

** Replace method

#+BEGIN_SRC js
string.replace(/.../, 'a')
string.replace(/(..1..) (..2..), '$2 $1')
#+END_SRC

  - '/ ... /g' finds all possible matches (can be used to replaceAll)
  - $1 is the first matched group, $2 is 2nd ... up to $9
  - $& refers to the whole match

  - 2nd argument to the replace method can be a function too

** Greed

   - +, *, ?, {} are greedy. they try to match as many characters as
     possible and backtrack from there.
   - +?, *?, ??, {}? are non-greedy. they match as little as possible
     and start matching more only if it doesn't fit.
   - Consider the non-greedy repetition operators first.

** Dynamically creating new RegExp Objects

#+BEGIN_SRC js
let name = "harry"
let text = "Harry is a suspicious character."
let regexp = new RegExp("\\b(" + name + ")\\b", "gi")
console.log(text.replace(regexp, "_$1_"))
// → _Harry_ is a suspicious character.
#+END_SRC

  - Escape everything which is not alphanumeric or whitespace is
    safe. It is useful when you want to match a char that has special
    meaning in a Regex.

#+BEGIN_SRC js
var name = "dea+hl[]rd";
var text = "This dea+hl[]rd guy is super annoying.";
var escaped = name.replace(/[^\w\s]/g, "\\$&");
var regexp = new RegExp("\\b(" + escaped + ")\\b", "gi");
console.log(text.replace(regexp, "_$1_"));
// → This _dea+hl[]rd_ guy is super annoying.
#+END_SRC

** Search method

   - Is like indexOf but for regular expressions. But you cannot
     supply the index where the search starts as a second argument
     like in indexOf.

** LastIndex property

   - It is a property of RegExp object which controls where the next
     match will start when the global option (g) is enabled and the
     match must happen through 'exec method.

   - So when using a global RegExp multiple times the matching might
     start elsewhere at an index that was left over from the previous call.

   - When called with global expression, 'match' returns an array
     containing all matches

** Looping over matches

#+BEGIN_SRC js
var input = "A string with 3 numbers in it... 42 and 88.";
var number = /\b(\d+)\b/g;
var match;
while (match = number.exec(input))
  console.log("Found", match[1], "at", match.index);
// → Found 3 at 14
//   Found 42 at 33
//   Found 88 at 40
#+END_SRC

** International Characters

   - \w or word character is one of the 26 English alphabets and the underscore.

   - \s matches all whitespace characters in Unicode.
* Chapter 12: Javascript and the Browser
  - &lt; &gt; are used to put < and > in html
  - &<word>; is called an entity and will be replaced by the character
    it encodes.
  - &amp, &quot for & and '

* Chapter 13: The DOM
** Moving through the Tree
   - childNodes, firstChild, lastChild, previousSibling, nextSibling, parentNode

#+BEGIN_SRC js
function talksAbout(node, string) {
  if (node.nodeType == document.ELEMENT_NODE) {
    for (var i = 0; i < node.childNodes.length; i++) {
      if (talksAbout(node.childNodes[i], string))
        return true;
    }
    return false;
  } else if (node.nodeType == document.TEXT_NODE) {
    return node.nodeValue.indexOf(string) > -1;
  }
}

console.log(talksAbout(document.body, "book"));
// → true
#+END_SRC
